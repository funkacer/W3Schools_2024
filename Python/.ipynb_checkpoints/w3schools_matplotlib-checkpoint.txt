# pip install matplotlib

The version string is stored under __version__ attribute.

import matplotlib
print(matplotlib.__version__)


Pyplot
- Most of the Matplotlib utilities lies under the pyplot submodule, and are usually imported under the plt alias:
- import matplotlib.pyplot as plt
- Now the Pyplot package can be referred to as plt.


# Draw a line in a diagram from position (0,0) to position (6,250):
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([0, 6])
ypoints = np.array([0, 250])
plt.plot(xpoints, ypoints)
plt.show()


Plotting x and y points
- The plot() function is used to draw points (markers) in a diagram.
- By default, the plot() function draws a line from point to point.
- The function takes parameters for specifying points in the diagram.
- Parameter 1 is an array containing the points on the x-axis.
- Parameter 2 is an array containing the points on the y-axis.
- If we need to plot a line from (1, 3) to (8, 10), we have to pass two arrays [1, 8] and [3, 10] to the plot function.

# Draw a line in a diagram from position (1, 3) to position (8, 10):
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([1, 8])
ypoints = np.array([3, 10])
plt.plot(xpoints, ypoints)
plt.show()

Note:
- The x-axis is the horizontal axis.
- The y-axis is the vertical axis.


Plotting Without Line
- To plot only the markers, you can use shortcut string notation parameter 'o', which means 'rings'.

# Draw two points in the diagram, one at position (1, 3) and one in position (8, 10):
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([1, 8])
ypoints = np.array([3, 10])
plt.plot(xpoints, ypoints, 'o')
plt.show()


# moje - barevne body pomoci scatter:
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([1, 2, 3, 4, 5, 6, 7, 8])
ypoints = np.array([3, 10, 2, -5, 17, 6, 7, 8])
sizes = np.ones(8)*100
colors = ['b', 'g', 'r', 'c', 'm', 'y', 'k', 'w']
plt.scatter(xpoints, ypoints, s = sizes, c = colors)
plt.show()


Multiple Points
- You can plot as many points as you like, just make sure you have the same number of points in both axis.

# Draw a line in a diagram from position (1, 3) to (2, 8) then to (6, 1) and finally to position (8, 10):
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([1, 2, 6, 8])
ypoints = np.array([3, 8, 1, 10])
plt.plot(xpoints, ypoints)
plt.show()


# moje - body se kresli v poradi, jake se uvede, takze se cara muze i vracet sem tam:
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.array([1, 2, 6, 8, -1, 1])
ypoints = np.array([3, 8, 1, 10, -10, 3])
plt.plot(xpoints, ypoints)
plt.show()


Default X-Points
- If we do not specify the points on the x-axis, they will get the default values 0, 1, 2, 3 etc., depending on the length of the y-points.
- So, if we take the same example as above, and leave out the x-points, the diagram will look like this:

# Plotting without x-points:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10, 5, 7])
plt.plot(ypoints)
plt.show()

The x-points in the example above are [0, 1, 2, 3, 4, 5].



Markers
- You can use the keyword argument marker to emphasize each point with a specified marker:

# Mark each point with a circle:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o')
plt.show()


Mark each point with a star:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = '*')
plt.show()

Marker Reference
- You can choose any of these markers:
Marker	Description
'o'	Circle	
'*'	Star	
'.'	Point	
','	Pixel	
'x'	X	
'X'	X (filled)	
'+'	Plus	
'P'	Plus (filled)	
's'	Square	
'D'	Diamond	
'd'	Diamond (thin)	
'p'	Pentagon	
'H'	Hexagon	
'h'	Hexagon	
'v'	Triangle Down	
'^'	Triangle Up	
'<'	Triangle Left	
'>'	Triangle Right	
'1'	Tri Down	
'2'	Tri Up	
'3'	Tri Left	
'4'	Tri Right	
'|'	Vline	
'_'	Hline	


Format Strings fmt
- You can also use the shortcut string notation parameter to specify the marker.
- This parameter is also called fmt, and is written with this syntax:
- marker|line|color

# Mark each point with a circle:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, 'o:r')
plt.show()

The marker value can be anything from the Marker Reference above.
The line value can be one of the following:
Line Syntax	Description
'-'	Solid line	
':'	Dotted line	
'--'	Dashed line	
'-.'	Dashed/dotted line

Note: If you leave out the line value in the fmt parameter, no line will be plotted.
- plt.plot(ypoints, 'or')
- vytiskne červené body


The short color value can be one of the following:
- Color Reference:
Color Syntax	Description
'r'	Red	
'g'	Green	
'b'	Blue	
'c'	Cyan	
'm'	Magenta	
'y'	Yellow	
'k'	Black	
'w'	White


Marker Size
- You can use the keyword argument markersize or the shorter version, ms to set the size of the markers:

# Set the size of the markers to 20:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20)
plt.show()


Marker Color
- You can use the keyword argument markeredgecolor or the shorter mec to set the color of the edge of the markers:

# Set the EDGE color to red:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r')
# plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', color = 'g')
plt.show()

Marker Color
- You can use the keyword argument markerfacecolor or the shorter mfc to set the color inside the edge of the markers:

# Set the FACE color to red:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20, mfc = 'r')
plt.show()

Marker Color
- Use both the mec and mfc arguments to color the entire marker:

# Set the color of both the edge and the face to red:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r')
# plt.plot(ypoints, marker = 'o', ms = 20, mec = 'r', mfc = 'r', c = 'g')
plt.show()

Marker Color
- You can also use Hexadecimal color values:
- https://www.w3schools.com/colors/colors_hexadecimal.asp

# Mark each point with a beautiful green color:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20, mec = '#4CAF50', mfc = '#4CAF50')
plt.show()

Marker Color
- Or any of the 140 supported color names.
- https://www.w3schools.com/colors/colors_names.asp

# Mark each point with the color named "hotpink":
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, marker = 'o', ms = 20, mec = 'hotpink', mfc = 'hotpink')
plt.show()



Linestyle
- You can use the keyword argument linestyle, or shorter ls, to change the style of the plotted line:

# Use a dotted line:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, linestyle = 'dotted')
plt.show()


# Use a dashed line:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, linestyle = 'dashed')
plt.show()


Shorter Syntax
The line style can be written in a shorter syntax:
- linestyle can be written as ls.
- dotted can be written as :.
- dashed can be written as --.


Shorter syntax:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, ls = ':')
plt.show()


Line Styles
- You can choose any of these styles:
Style	Or
'solid' (default)	'-'	
'dotted'	':'	
'dashed'	'--'	
'dashdot'	'-.'	
'None'	'' or ' '


Line Color
- You can use the keyword argument color or the shorter c to set the color of the line:

# Set the line color to red:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, color = 'r')
plt.show()


You can also use Hexadecimal color values:
- https://www.w3schools.com/colors/colors_hexadecimal.asp

# Plot with a beautiful green line:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, c = '#4CAF50')
plt.show()


Or any of the 140 supported color names.
- https://www.w3schools.com/colors/colors_names.asp

# Plot with the color named "hotpink":
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, c = 'hotpink')
plt.show()


Line Width
- You can use the keyword argument linewidth or the shorter lw to change the width of the line.
- The value is a floating number, in points:

# Plot with a 20.5pt wide line:
import matplotlib.pyplot as plt
import numpy as np
ypoints = np.array([3, 8, 1, 10])
plt.plot(ypoints, linewidth = '20.5')
plt.show()


Multiple Lines
- You can plot as many lines as you like by simply adding more plt.plot() functions:

# Draw two lines by specifying a plt.plot() function for each line:
import matplotlib.pyplot as plt
import numpy as np
y1 = np.array([3, 8, 1, 10])
y2 = np.array([6, 2, 7, 11])
plt.plot(y1)
plt.plot(y2)
plt.show()



You can also plot many lines by adding the points for the x- and y-axis for each line in the same plt.plot() function.
- In the examples above we only specified the points on the y-axis, meaning that the points on the x-axis got the the default values (0, 1, 2, 3).
- The x- and y- values come in pairs.

# Draw two lines by specifiyng the x- and y-point values for both lines:
import matplotlib.pyplot as plt
import numpy as np
x1 = np.array([0, 1, 2, 3])
y1 = np.array([3, 8, 1, 10])
x2 = np.array([0, 1, 2, 3])
y2 = np.array([6, 2, 7, 11])
plt.plot(x1, y1, x2, y2)
plt.show()




Matplotlib Labels and Title

Create Labels for a Plot
With Pyplot, you can use the xlabel() and ylabel() functions to set a label for the x- and y-axis.

# Add labels to the x- and y-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.plot(x, y)
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.show()


Create a Title for a Plot
- With Pyplot, you can use the title() function to set a title for the plot.

# Add a plot title and labels for the x- and y-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.plot(x, y)
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.show()



Set Font Properties for Title and Labels
- You can use the fontdict parameter in xlabel(), ylabel(), and title() to set font properties for the title and labels.

# Set font properties for the title and labels:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}
plt.title("Sports Watch Data", fontdict = font1)
plt.xlabel("Average Pulse", fontdict = font2)
plt.ylabel("Calorie Burnage", fontdict = font2)
plt.plot(x, y)
plt.show()


Position the Title
- You can use the loc parameter in title() to position the title.
- Legal values are: 'left', 'right', and 'center'. Default value is 'center'.

# Position the title to the left:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data", loc = 'left')
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.show()



Add Grid Lines to a Plot
- With Pyplot, you can use the grid() function to add grid lines to the plot.

# Add grid lines to the plot:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid()
plt.show()


Specify Which Grid Lines to Display
- You can use the axis parameter in the grid() function to specify which grid lines to display.
- Legal values are: 'x', 'y', and 'both'. Default value is 'both'.

# Display only grid lines for the x-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(axis = 'x')
plt.show()

# Display only grid lines for the y-axis:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(axis = 'y')
plt.show()


Set Line Properties for the Grid
- You can also set the line properties of the grid, like this: grid(color = 'color', linestyle = 'linestyle', linewidth = number).

# Set the line properties of the grid:
import numpy as np
import matplotlib.pyplot as plt
x = np.array([80, 85, 90, 95, 100, 105, 110, 115, 120, 125])
y = np.array([240, 250, 260, 270, 280, 290, 300, 310, 320, 330])
plt.title("Sports Watch Data")
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.plot(x, y)
plt.grid(color = 'green', linestyle = '--', linewidth = 0.5)
plt.show()





Display Multiple Plots
- With the subplot() function you can draw multiple plots in one figure:

# Draw 2 plots:
import matplotlib.pyplot as plt
import numpy as np
#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(1, 2, 1)
plt.plot(x,y)
#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.grid() # moje - udela grid jen ve druhem grafu
plt.show()



The subplot() Function
- The subplot() function takes three arguments that describes the layout of the figure.
- The layout is organized in rows and columns, which are represented by the first and second argument.
- The third argument represents the index of the current plot.
- plt.subplot(1, 2, 1)
#the figure has 1 row, 2 columns, and this plot is the first plot.
- plt.subplot(1, 2, 2)
#the figure has 1 row, 2 columns, and this plot is the second plot.
- So, if we want a figure with 2 rows an 1 column (meaning that the two plots will be displayed on top of each other instead of side-by-side), we can write the syntax like this:

# Draw 2 plots on top of each other:
import matplotlib.pyplot as plt
import numpy as np
#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(2, 1, 1)
plt.plot(x,y)
#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(2, 1, 2)
plt.plot(x,y)
plt.show()

You can draw as many plots you like on one figure, just descibe the number of rows, columns, and the index of the plot.


# Draw 6 plots:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(2, 3, 1)
plt.plot(x,y)
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(2, 3, 2)
plt.plot(x,y)
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(2, 3, 3)
plt.plot(x,y)
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(2, 3, 4)
plt.plot(x,y)
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(2, 3, 5)
plt.plot(x,y)
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(2, 3, 6)
plt.plot(x,y)
plt.show()



Title
- You can add a title to each plot with the title() function:

# 2 plots, with titles:
import matplotlib.pyplot as plt
import numpy as np
#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")
#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")
plt.show()


Super Title
- You can add a title to the entire figure with the suptitle() function:

# Add a title for the entire figure:
import matplotlib.pyplot as plt
import numpy as np
#plot 1:
x = np.array([0, 1, 2, 3])
y = np.array([3, 8, 1, 10])
plt.subplot(1, 2, 1)
plt.plot(x,y)
plt.title("SALES")
#plot 2:
x = np.array([0, 1, 2, 3])
y = np.array([10, 20, 30, 40])
plt.subplot(1, 2, 2)
plt.plot(x,y)
plt.title("INCOME")
plt.suptitle("MY SHOP")
plt.show()



Creating Scatter Plots
- With Pyplot, you can use the scatter() function to draw a scatter plot.
- The scatter() function plots one dot for each observation. It needs two arrays of the same length, one for the values of the x-axis, and one for values on the y-axis:

# A simple scatter plot:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y)
plt.show()

The observation in the example above is the result of 13 cars passing by.
- The X-axis shows how old the car is.
- The Y-axis shows the speed of the car when it passes.
- Are there any relationships between the observations?
- It seems that the newer the car, the faster it drives, but that could be a coincidence, after all we only registered 13 cars.


Compare Plots
- In the example above, there seems to be a relationship between speed and age, but what if we plot the observations from another day as well? Will the scatter plot tell us something else?

# Draw two plots on the same figure:
import matplotlib.pyplot as plt
import numpy as np
#day one, the age and speed of 13 cars:
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y)
#day two, the age and speed of 15 cars:
x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
plt.scatter(x, y)
plt.show()

Note: The two plots are plotted with two different colors, by default blue and orange, you will learn how to change colors later in this chapter.
- By comparing the two plots, I think it is safe to say that they both gives us the same conclusion: the newer the car, the faster it drives.


Colors
- You can set your own color for each scatter plot with the color or the c argument:

# Set your own color of the markers:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
plt.scatter(x, y, color = 'hotpink')
x = np.array([2,2,8,1,15,8,12,9,7,3,11,4,7,14,12])
y = np.array([100,105,84,105,90,99,90,95,94,100,79,112,91,80,85])
plt.scatter(x, y, color = '#88c999')
plt.show()


Color Each Dot
- You can even set a specific color for each dot by using an array of colors as value for the c argument:
- Note: You cannot use the color argument for this, only the c argument.

# Set your own color of the markers:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
colors = np.array(["red","green","blue","yellow","pink","black","orange","purple","beige","brown","gray","cyan","magenta"])
plt.scatter(x, y, c=colors)
plt.show()


ColorMap
- The Matplotlib module has a number of available colormaps.
- A colormap is like a list of colors, where each color has a value that ranges from 0 to 100.
- Here is an example of a colormap:
- This colormap is called 'viridis' and as you can see it ranges from 0, which is a purple color, up to 100, which is a yellow color.

How to Use the ColorMap
- You can specify the colormap with the keyword argument cmap with the value of the colormap, in this case 'viridis' which is one of the built-in colormaps available in Matplotlib.
- In addition you have to create an array with values (from 0 to 100), one value for each point in the scatter plot:

# Create a color array, and specify a colormap in the scatter plot:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
colors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])
plt.scatter(x, y, c=colors, cmap='viridis')
plt.show()


You can include the colormap in the drawing by including the plt.colorbar() statement:

# Include the actual colormap:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
colors = np.array([0, 10, 20, 30, 40, 45, 50, 55, 60, 70, 80, 90, 100])
plt.scatter(x, y, c=colors, cmap='viridis')
plt.colorbar()
plt.show()

Available ColorMaps
You can choose any of the built-in colormaps:

Name		 	Reverse	
Accent		 	Accent_r	
Blues		 	Blues_r	
BrBG		 	BrBG_r	
BuGn		 	BuGn_r	
BuPu		 	BuPu_r	
CMRmap		 	CMRmap_r	
Dark2		 	Dark2_r	
GnBu		 	GnBu_r	
Greens		 	Greens_r	
Greys		 	Greys_r	
OrRd		 	OrRd_r	
Oranges		 	Oranges_r	
PRGn		 	PRGn_r	
Paired		 	Paired_r	
Pastel1		 	Pastel1_r	
Pastel2		 	Pastel2_r	
PiYG		 	PiYG_r	
PuBu		 	PuBu_r	
PuBuGn		 	PuBuGn_r	
PuOr		 	PuOr_r	
PuRd		 	PuRd_r	
Purples		 	Purples_r	
RdBu		 	RdBu_r	
RdGy		 	RdGy_r	
RdPu		 	RdPu_r	
RdYlBu		 	RdYlBu_r	
RdYlGn		 	RdYlGn_r	
Reds		 	Reds_r	
Set1		 	Set1_r	
Set2		 	Set2_r	
Set3		 	Set3_r	
Spectral		 	Spectral_r	
Wistia		 	Wistia_r	
YlGn		 	YlGn_r	
YlGnBu		 	YlGnBu_r	
YlOrBr		 	YlOrBr_r	
YlOrRd		 	YlOrRd_r	
afmhot		 	afmhot_r	
autumn		 	autumn_r	
binary		 	binary_r	
bone		 	bone_r	
brg		 	brg_r	
bwr		 	bwr_r	
cividis		 	cividis_r	
cool		 	cool_r	
coolwarm		 	coolwarm_r	
copper		 	copper_r	
cubehelix		 	cubehelix_r	
flag		 	flag_r	
gist_earth		 	gist_earth_r	
gist_gray		 	gist_gray_r	
gist_heat		 	gist_heat_r	
gist_ncar		 	gist_ncar_r	
gist_rainbow		 	gist_rainbow_r	
gist_stern		 	gist_stern_r	
gist_yarg		 	gist_yarg_r	
gnuplot		 	gnuplot_r	
gnuplot2		 	gnuplot2_r	
gray		 	gray_r	
hot		 	hot_r	
hsv		 	hsv_r	
inferno		 	inferno_r	
jet		 	jet_r	
magma		 	magma_r	
nipy_spectral		 	nipy_spectral_r	
ocean		 	ocean_r	
pink		 	pink_r	
plasma		 	plasma_r	
prism		 	prism_r	
rainbow		 	rainbow_r	
seismic		 	seismic_r	
spring		 	spring_r	
summer		 	summer_r	
tab10		 	tab10_r	
tab20		 	tab20_r	
tab20b		 	tab20b_r	
tab20c		 	tab20c_r	
terrain		 	terrain_r	
twilight		 	twilight_r	
twilight_shifted		 	twilight_shifted_r	
viridis		 	viridis_r	
winter		 	winter_r	



Size
- You can change the size of the dots with the s argument.
- Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:

# Set your own size for the markers:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
sizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])
plt.scatter(x, y, s=sizes)
plt.show()


Alpha
- You can adjust the transparency of the dots with the alpha argument.
- Just like colors, make sure the array for sizes has the same length as the arrays for the x- and y-axis:

# Set your own size for the markers:
import matplotlib.pyplot as plt
import numpy as np
x = np.array([5,7,8,7,2,17,2,9,4,11,12,9,6])
y = np.array([99,86,87,88,111,86,103,87,94,78,77,85,86])
sizes = np.array([20,50,100,200,500,1000,60,90,10,300,600,800,75])
plt.scatter(x, y, s=sizes, alpha=0.5)
plt.show()



Combine Color Size and Alpha
- You can combine a colormap with different sizes of the dots. This is best visualized if the dots are transparent:

# Create random arrays with 100 values for x-points, y-points, colors and sizes:
import matplotlib.pyplot as plt
import numpy as np
x = np.random.randint(100, size=(100))
y = np.random.randint(100, size=(100))
colors = np.random.randint(100, size=(100))
sizes = 10 * np.random.randint(100, size=(100))
plt.scatter(x, y, c=colors, s=sizes, alpha=0.5, cmap='nipy_spectral')
plt.colorbar()
plt.show()




Creating Bars
- With Pyplot, you can use the bar() function to draw bar graphs:

# Draw 4 bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.bar(x,y)
plt.show()


The bar() function takes arguments that describes the layout of the bars.
- The categories and their values represented by the first and second argument as arrays.

# Example:
import matplotlib.pyplot as plt
import numpy as np
x = ["APPLES", "BANANAS"]
y = [400, 350]
plt.bar(x, y)
plt.show()


Horizontal Bars
- If you want the bars to be displayed horizontally instead of vertically, use the barh() function:

# Draw 4 horizontal bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.barh(x, y)
plt.show()


Bar Color
- The bar() and barh() take the keyword argument color to set the color of the bars:

# Draw 4 red bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.bar(x, y, color = "red")
plt.show()


Color Names
- You can use any of the 140 supported color names.

Draw 4 "hot pink" bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.bar(x, y, color = "hotpink")
plt.show()


Color Hex
- Or you can use Hexadecimal color values:

# Draw 4 bars with a beautiful green color:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.bar(x, y, color = "#4CAF50")
plt.show()



Bar Width
- The bar() takes the keyword argument width to set the width of the bars:

# Draw 4 very thin bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.bar(x, y, width = 0.1)
plt.show()

The default width value is 0.8
- Note: For horizontal bars, use height instead of width.



Bar Height
- The barh() takes the keyword argument height to set the height of the bars:

# Draw 4 very thin bars:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
plt.barh(x, y, height = 0.1)
plt.show()




Matplotlib Histograms

Histogram
- A histogram is a graph showing frequency distributions.
- It is a graph showing the number of observations within each given interval.
- Example: Say you ask for the height of 250 people, you might end up with a histogram like this:

--obrázek1

- You can read from the histogram that there are approximately:
2 people from 140 to 145cm
5 people from 145 to 150cm
15 people from 151 to 156cm
31 people from 157 to 162cm
46 people from 163 to 168cm
53 people from 168 to 173cm
45 people from 173 to 178cm
28 people from 179 to 184cm
21 people from 185 to 190cm
4 people from 190 to 195cm


Create Histogram
- In Matplotlib, we use the hist() function to create histograms.
- The hist() function will use an array of numbers to create a histogram, the array is sent into the function as an argument.
- For simplicity we use NumPy to randomly generate an array with 250 values, where the values will concentrate around 170, and the standard deviation is 10. Learn more about Normal Data Distribution in our Machine Learning Tutorial.

# A Normal Data Distribution by NumPy:
import numpy as np
x = np.random.normal(170, 10, 250)
print(x)


The hist() function will read the array and produce a histogram:

# A simple histogram:
import matplotlib.pyplot as plt
import numpy as np
x = np.random.normal(170, 10, 250)
plt.hist(x)
plt.show() 



Matplotlib Pie Charts

Creating Pie Charts
- With Pyplot, you can use the pie() function to draw pie charts:

# A simple pie chart:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
plt.pie(y)
plt.show() 


As you can see the pie chart draws one piece (called a wedge) for each value in the array (in this case [35, 25, 25, 15]).
- By default the plotting of the first wedge starts from the x-axis and moves counterclockwise:

--obrázek 2

Note: The size of each wedge is determined by comparing the value with all the other values, by using this formula:
- The value divided by the sum of all values: x/sum(x)


Labels
- Add labels to the pie chart with the labels parameter.
- The labels parameter must be an array with one label for each wedge:

# A simple pie chart:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
plt.pie(y, labels = mylabels)
plt.show() 




Start Angle
- As mentioned the default start angle is at the x-axis, but you can change the start angle by specifying a startangle parameter.
- The startangle parameter is defined with an angle in degrees, default angle is 0:

--obrázek 3

# Start the first wedge at 90 degrees:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
plt.pie(y, labels = mylabels, startangle = 90)
plt.show() 


Explode
- Maybe you want one of the wedges to stand out? The explode parameter allows you to do that.
- The explode parameter, if specified, and not None, must be an array with one value for each wedge.
- Each value represents how far from the center each wedge is displayed:

# Pull the "Apples" wedge 0.2 from the center of the pie:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]
plt.pie(y, labels = mylabels, explode = myexplode)
plt.show() 


Shadow
- Add a shadow to the pie chart by setting the shadows parameter to True:

# Add a shadow:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
myexplode = [0.2, 0, 0, 0]
plt.pie(y, labels = mylabels, explode = myexplode, shadow = True)
plt.show() 



Colors
- You can set the color of each wedge with the colors parameter.
- The colors parameter, if specified, must be an array with one value for each wedge:

# Specify a new color for each wedge:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
mycolors = ["black", "hotpink", "b", "#4CAF50"]
plt.pie(y, labels = mylabels, colors = mycolors)
plt.show()


You can use Hexadecimal color values (https://www.w3schools.com/colors/colors_hexadecimal.asp), any of the 140 supported color names (https://www.w3schools.com/colors/colors_names.asp), or one of these shortcuts:

'r' - Red
'g' - Green
'b' - Blue
'c' - Cyan
'm' - Magenta
'y' - Yellow
'k' - Black
'w' - White 


Legend
- To add a list of explanation for each wedge, use the legend() function:

# Add a legend:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
plt.pie(y, labels = mylabels)
plt.legend()
plt.show() 


Legend With Header
- To add a header to the legend, add the title parameter to the legend function.

# Add a legend with a header:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
plt.pie(y, labels = mylabels)
plt.legend(title = "Four Fruits:")
plt.show() 




# moje labely:
import matplotlib.pyplot as plt
import numpy as np
y = np.array([35, 25, 25, 15])
mylabels = ["Apples", "Bananas", "Cherries", "Dates"]
expl=[0.0 for _ in range(len(y))]
expl[0]=0.15
plt.pie(y,labels=mylabels,explode=expl,shadow=True,autopct="%1.2f%%", startangle = 90, counterclock=False)
plt.legend(title = "legenda")
plt.title("Název")
plt.show()



# nevim co to dela: https://numpy.org/doc/stable/reference/generated/numpy.histogram.html
import matplotlib.pyplot as plt
import numpy as np
rng = np.random.RandomState(10)  # deterministic random data
a = np.hstack((rng.normal(size=1000),
               rng.normal(loc=5, scale=2, size=1000)))
_ = plt.hist(a, bins='auto')  # arguments are passed to np.histogram
plt.title("Histogram with 'auto' bins")
plt.show()

# spocita pocty pro intervaly
density, edges = np.histogram(a, bins = 10, density = False)
print(density)
print(edges)


# dela to presne toto:
import matplotlib.pyplot as plt
import numpy as np
rng = np.random.RandomState(10)  # deterministic random data
a1 = rng.normal(size=10)
a2 = rng.normal(loc=5, scale=2, size=10)
a = np.hstack((a1,a2))
print(a)
counts, bins = np.histogram(a2) #lze dat , "auto", default je bin = 10
print(bins)
print(counts)
plt.hist(a1, alpha = 0.5)
plt.hist(a2, alpha = 0.5)
plt.hist(a, alpha = 0.5)
plt.show()



# super truper bomba jak udelat hist:
import matplotlib.pyplot as plt
import numpy as np
rng = np.random.RandomState(10)  # deterministic random data
a = np.hstack((rng.normal(size=1000),
               rng.normal(loc=5, scale=2, size=1000)))
_ = plt.hist(a, bins=10)  # arguments are passed to np.histogram
plt.title("Histogram with 'auto' bins")
density, edges = np.histogram(a, bins = 10, density = False)
print(density)
print(edges)
plt.bar(edges[:10], density, color = 'orange')
plt.show()




# muj pokus s body
# ja zpracovat vsechny max a min pro kazdou vlnu 2*pi - nefunguje pro licha cisla, nerozdeli se na spravne intervaly, opraveno na 100*range_x (vždy sudé)
# jak rozdelit interval na casti, aby se neprekryvalo

import matplotlib.pyplot as plt
import numpy as np

range_x = 3
x = np.linspace(-np.pi*range_x, np.pi*range_x, 100*range_x)
y = np.sin(x)

body_min_x = []
body_min_y = []
body_max_x = []
body_max_y = []
# ja zpracovat vsechny max a min pro kazdou vlnu 2*pi
for i in range(int(round((max(x) - min(x)) / (2*np.pi), 0))):
  print(min(x) + 2*np.pi*i, min(x) + 2*np.pi*(i+1))
  min_x_range = np.min(np.where(x >= min(x) + 2*np.pi*i))
  max_x_range = np.max(np.where( x <= min(x) + 2*np.pi*(i+1)))
  print(min_x_range, max_x_range)
  y_range = y[min_x_range:max_x_range]
  print(y_range)
  body_min_y.append(min(y_range))
  body_min_x.append(x[np.where(y == min(y_range))])
  body_max_y.append(max(y_range))
  body_max_x.append(x[np.where(y == max(y_range))])

body_colors = np.random.choice(range(1, len(body_min_x)*2 + 1), size=len(body_min_x)*2, replace=False)

print(body_min_x, body_min_y)
print(body_max_x, body_max_y)
print(body_colors)


plt.plot(x,y)
plt.scatter(body_min_x + body_max_x, body_min_y + body_max_y, cmap = 'viridis', c = body_colors)
plt.colorbar()
plt.show()




# easy rects - jak získat barvu?:
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
y = np.array([3, 8, 1, 10])
bar_colors = ['tab:red', 'tab:blue', 'tab:red', 'tab:orange']
rects = plt.bar(x,y, color = bar_colors)
print(rects)
for rect in rects:
  print(rect)
  plt.annotate(rect.get_height(), (rect.get_x() + rect.get_width()/2, rect.get_height()), ha = 'center', va = 'bottom', color = 'darkblue')
plt.show()



# https://matplotlib.org/stable/gallery/lines_bars_and_markers/barchart.html#sphx-glr-gallery-lines-bars-and-markers-barchart-py
import matplotlib.pyplot as plt
import numpy as np
species = ("Adelie", "Chinstrap", "Gentoo")
penguin_means = {
    'Bill Depth': (18.35, 18.43, 14.98),
    'Bill Length': (38.79, 48.83, 47.50),
    'Flipper Length': (189.95, 195.82, 217.19),
}
x = np.arange(len(species))  # the label locations
width = 0.25  # the width of the bars
multiplier = 0
fig, ax = plt.subplots(layout='constrained')
for attribute, measurement in penguin_means.items():
    offset = width * multiplier
    rects = ax.bar(x + offset, measurement, width, label=attribute)
    ax.bar_label(rects, padding=3)
    multiplier += 1
# Add some text for labels, title and custom x-axis tick labels, etc.
ax.set_ylabel('Length (mm)')
ax.set_title('Penguin attributes by species')
ax.set_xticks(x + width, species)
ax.legend(loc='upper left', ncols=3)
ax.set_ylim(0, 250)
plt.show()



# moje rects
import matplotlib.pyplot as plt
import numpy as np
x = np.array(["A", "B", "C", "D"])
a = np.array([3, 8, 1, 10])
font1 = {'family':'serif','color':'blue','size':20}
font2 = {'family':'serif','color':'darkred','size':15}
fig, ax = plt.subplots(figsize = (10,5))
rects = ax.bar(range(len(a)), a)
for rect in rects:
    ax.annotate(rect.get_height(), (rect.get_x() + rect.get_width()/2, rect.get_height()), ha = 'center', va = 'bottom', color = 'green')
    rect.set_color('green')
plt.xticks(range(len(a)), x, rotation=0, color = 'green')
plt.xlabel('Ahoj', fontdict = font2)
plt.title("Dnes", fontdict = font1, fontweight="bold")
plt.show()



# moje 2 osy:
import matplotlib.pyplot as plt
import numpy as np
import datetime
import matplotlib.pyplot as plt
from mpl_toolkits.axes_grid1 import host_subplot
import matplotlib.pyplot as plt
import matplotlib.dates as mdates

x1 = np.array([0, 1, 2, 3])
y1 = np.array([3, 8, 5, 10])
x2 = np.array([0, 1, 2, 3])
y2 = np.array([6, 2, 7, 11])
x3 = np.array([0, 1, 2, 3])
y3 = np.array([8, 10, 6, 8])

fig,ax = plt.subplots(0,0,figsize=(10,5))
host = host_subplot(111)
par = host.twinx()
host.set_xlabel("Rok-Měsíc")
host.set_ylabel("Výpovědi")
par.set_ylabel("Expirace")
h1, = host.plot(x1, y1, label="Výpovědi fix")
h2, = host.plot(x2, y2, label="Výpovědi standard")
p1, = par.plot(x3, y3, label="Expirace")
leg = plt.legend()
par.yaxis.get_label().set_color(p1.get_color())
leg.texts[0].set_color(h1.get_color())
leg.texts[1].set_color(h2.get_color())
leg.texts[2].set_color(p1.get_color())
plt.gca().xaxis.set_major_locator(mdates.MonthLocator())
host.tick_params(axis='x', which = 'both', rotation=45, length=6, width=2)
plt.grid(True)
plt.title('Zemní plyn')
plt.show()



# add lables to line (zkus, jestli jde):
import numpy as np
import matplotlib.pyplot as plt
def add_labels(line):
    x,y=line.get_data()
    labels=map(':'.join,zip(map(lambda s: '%g'%s,x),map(lambda s: '%g'%s,y)))
    list(map(plt.text,x,y,labels))
x = np.arange(0, 10)
y = np.exp2(x)
line,= plt.plot(x, y, marker = "x")
add_labels(line)
plt.xlabel("Average Pulse")
plt.ylabel("Calorie Burnage")
plt.show() 


# hezkej random graf
import matplotlib.pyplot as plt
import numpy as np
N = 50
x = np.random.rand(N)
y = np.random.rand(N)
colors = np.random.rand(N)
size = (30 * np.random.rand(N))**2
plt.scatter(x, y, c=colors, s=size, alpha=0.5)
plt.colorbar()
plt.show()



