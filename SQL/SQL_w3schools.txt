What is SQL?
- SQL stands for Structured Query Language
- SQL lets you access and manipulate databases
- SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987

# Select all records from the Customers table:
SELECT * FROM Customers;

Database Tables
- A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"), and contain records (rows) with data.
- In this tutorial we will use the well-known Northwind sample database (included in MS Access and MS SQL Server).
- Below is a selection from the Customers table used in the examples:
- The table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).

Keep in Mind That...
- SQL keywords are NOT case sensitive: select is the same as SELECT
- In this tutorial we will write all SQL keywords in upper-case.

Semicolon after SQL Statements?
- Some database systems require a semicolon at the end of each SQL statement.
- Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.
- In this tutorial, we will use semicolon at the end of each SQL statement.

Some of The Most Important SQL Commands
- SELECT - extracts data from a database
- UPDATE - updates data in a database
- DELETE - deletes data from a database
- INSERT INTO - inserts new data into a database
- CREATE DATABASE - creates a new database
- ALTER DATABASE - modifies a database
- CREATE TABLE - creates a new table
- ALTER TABLE - modifies a table
- DROP TABLE - deletes a table
- CREATE INDEX - creates an index (search key)
- DROP INDEX - deletes an index


The SQL SELECT Statement
- The SELECT statement is used to select data from a database.

# Return data from the Customers table:
SELECT CustomerName, City FROM Customers;


Syntax

SELECT column1, column2, ...
FROM table_name;

Here, column1, column2, ... are the field names of the table you want to select data from.
The table_name represents the name of the table you want to select data from.


Select ALL columns
- If you want to return all columns, without specifying every column name, you can use the SELECT * syntax:

# Return all the columns from the Customers table:
SELECT * FROM Customers;

The SQL SELECT DISTINCT Statement
- The SELECT DISTINCT statement is used to return only distinct (different) values.

# Select all the different countries from the "Customers" table:
SELECT DISTINCT Country FROM Customers;

Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

Syntax

SELECT DISTINCT column1, column2, ...
FROM table_name;


SELECT Example Without DISTINCT
- If you omit the DISTINCT keyword, the SQL statement returns the "Country" value from all the records of the "Customers" table:

# Example:
SELECT Country FROM Customers;


Count Distinct
- By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.

# Example:
SELECT COUNT(DISTINCT Country) FROM Customers;


Note: The COUNT(DISTINCT column_name) is not supported in Microsoft Access databases.
- Here is a workaround for MS Access:

SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);

You will learn about the COUNT function later in this tutorial.


The SQL WHERE Clause
- The WHERE clause is used to filter records.
- It is used to extract only those records that fulfill a specified condition.

# Select all customers from Mexico:
SELECT * FROM Customers
WHERE Country='Mexico';

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition;

Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!

Text Fields vs. Numeric Fields
- SQL requires single quotes around text values (most database systems will also allow double quotes).
- However, numeric fields should not be enclosed in quotes:

# Example:
SELECT * FROM Customers
WHERE CustomerID=1;


Operators in The WHERE Clause
- You can use other operators than the = operator to filter the search.

# Select all customers with a CustomerID greater than 80:
SELECT * FROM Customers
WHERE CustomerID > 80;

The following operators can be used in the WHERE clause:

Operator	Description	Example
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column




The SQL ORDER BY
- The ORDER BY keyword is used to sort the result-set in ascending or descending order.

# Sort the products by price:
SELECT * FROM Products
ORDER BY Price;

Syntax
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;


DESC
- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

# Sort the products from highest to lowest price:
SELECT * FROM Products
ORDER BY Price DESC;


Order Alphabetically
- For string values the ORDER BY keyword will order alphabetically:

# Sort the products alphatbetically by ProductName:
SELECT * FROM Products
ORDER BY ProductName;


Alphabetically DESC
- To sort the table reverse alphabetically, use the DESC keyword:

# Sort the products by ProductName in reverse order:
SELECT * FROM Products
ORDER BY ProductName DESC;


ORDER BY Several Columns
- The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:

# Example:
SELECT * FROM Customers
ORDER BY Country, CustomerName;


Using Both ASC and DESC
- The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:

# Example:
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;



The SQL AND Operator
- The WHERE clause can contain one or many AND operators.
- The AND operator is used to filter records based on more than one condition, like if you want to return all customers from Spain that starts with the letter 'G':

# Select all customers from Spain that starts with the letter 'G':
SELECT *
FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%';

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;


AND vs OR
- The AND operator displays a record if all the conditions are TRUE.
- The OR operator displays a record if any of the conditions are TRUE.


All Conditions Must Be True
- The following SQL statement selects all fields from Customers where Country is "Germany" AND City is "Berlin" AND PostalCode is higher than 12000:

# Example:
SELECT * FROM Customers
WHERE Country = 'Germany'
AND City = 'Berlin'
AND PostalCode > 1200;


Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.

# Select all Spanish customers that starts with either "G" or "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


Without parenthesis, the select statement will return all customers from Spain that starts with a "G", plus all customers that starts with an "R", regardless of the country value:

# Select all customers that either: are from Spain and starts with either "G", or starts with the letter "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';


The SQL OR Operator
- The WHERE clause can contain one or more OR operators.
- The OR operator is used to filter records based on more than one condition, like if you want to return all customers from Germany but also those from Spain:

# Select all customers from Germany or Spain:
SELECT *
FROM Customers
WHERE Country = 'Germany' OR Country = 'Spain';


> Syntax:
> SELECT column1, column2, ...
> FROM table_name
> WHERE condition1 OR condition2 OR condition3 ...;


OR vs AND
- The OR operator displays a record if any of the conditions are TRUE.
- The AND operator displays a record if all the conditions are TRUE.


At Least One Condition Must Be True
- The following SQL statement selects all fields from Customers where either City is "Berlin", CustomerName starts with the letter "G" or Country is "Norway":

# Example
SELECT * FROM Customers
WHERE City = 'Berlin' OR CustomerName LIKE 'G%' OR Country = 'Norway';


Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.

# Select all Spanish customers that starts with either "G" or "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


Without parenthesis, the select statement will return all customers from Spain that starts with a "G", plus all customers that starts with an "R", regardless of the country value:

# Select all customers that either: are from Spain and starts with either "G", or starts with the letter "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';



The NOT Operator
- The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.
- In the select statement below we want to return all customers that are NOT from Spain:

# Select only the customers that are NOT from Spain:
SELECT * FROM Customers
WHERE NOT Country = 'Spain';

In the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below.

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;


NOT LIKE

# Select customers that does not start with the letter 'A':
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'A%';


NOT BETWEEN

# Select customers with a customerID not between 10 and 60:
SELECT * FROM Customers
WHERE CustomerID NOT BETWEEN 10 AND 60;


NOT IN

# Select customers that are not from Paris or London:
SELECT * FROM Customers
WHERE City NOT IN ('Paris', 'London');


NOT Greater Than

# Select customers with a CustomerId not greater than 50:
SELECT * FROM Customers
WHERE NOT CustomerID > 50;

Note: There is a not-greater-then operator: !> that would give you the same result.


NOT Less Than

# Select customers with a CustomerID not less than 50:
SELECT * FROM Customers
WHERE NOT CustomerId < 50;

Note: There is a not-less-then operator: !< that would give you the same result.


SQL NULL Values
- What is a NULL Value?
- A field with a NULL value is a field with no value.
- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
- Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

How to Test for NULL Values?
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
- We will have to use the IS NULL and IS NOT NULL operators instead.

> IS NULL Syntax
> SELECT column_names
> FROM table_name
> WHERE column_name IS NULL;

> IS NOT NULL Syntax
> SELECT column_names
> FROM table_name
> WHERE column_name IS NOT NULL;


The IS NULL Operator
- The IS NULL operator is used to test for empty values (NULL values).

# The following SQL lists all customers with a NULL value in the "Address" field:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

Tip: Always use IS NULL to look for NULL values.

The IS NOT NULL Operator
- The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).

# The following SQL lists all customers with a value in the "Address" field:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;



The SQL SELECT TOP Clause
- The SELECT TOP clause is used to specify the number of records to return.
- The SELECT TOP clause is useful on large tables with thousands of records. Returning a large number of records can impact performance.

# Select only the first 3 records of the Customers table:
SELECT TOP 3 * FROM Customers;

Note: Not all database systems support the SELECT TOP clause. MySQL supports the LIMIT clause to select a limited number of records, while Oracle uses FETCH FIRST n ROWS ONLY and ROWNUM.


SQL Server / MS Access Syntax:

SELECT TOP number|percent column_name(s)
FROM table_name
WHERE condition;

MySQL Syntax:

SELECT column_name(s)
FROM table_name
WHERE condition
LIMIT number;

Oracle 12 Syntax:

SELECT column_name(s)
FROM table_name
ORDER BY column_name(s)
FETCH FIRST number ROWS ONLY;

Older Oracle Syntax:

SELECT column_name(s)
FROM table_name
WHERE ROWNUM <= number;

Older Oracle Syntax (with ORDER BY):

SELECT *
FROM (SELECT column_name(s) FROM table_name ORDER BY column_name(s))
WHERE ROWNUM <= number;


LIMIT
- The following SQL statement shows the equivalent example for MySQL:

# Select the first 3 records of the Customers table:
SELECT * FROM Customers
LIMIT 3;


FETCH FIRST
- The following SQL statement shows the equivalent example for Oracle:

# Select the first 3 records of the Customers table:
SELECT * FROM Customers
FETCH FIRST 3 ROWS ONLY;

SQL TOP PERCENT Example
- The following SQL statement selects the first 50% of the records from the "Customers" table (for SQL Server/MS Access):

# Example:
SELECT TOP 50 PERCENT * FROM Customers;

# The following SQL statement shows the equivalent example for Oracle:
SELECT * FROM Customers
FETCH FIRST 50 PERCENT ROWS ONLY;

ADD a WHERE CLAUSE
- The following SQL statement selects the first three records from the "Customers" table, where the country is "Germany" (for SQL Server/MS Access):

# Example:
SELECT TOP 3 * FROM Customers
WHERE Country='Germany';

# The following SQL statement shows the equivalent example for MySQL:
SELECT * FROM Customers
WHERE Country='Germany'
LIMIT 3;

# The following SQL statement shows the equivalent example for Oracle:
SELECT * FROM Customers
WHERE Country='Germany'
FETCH FIRST 3 ROWS ONLY;


ADD the ORDER BY Keyword
- Add the ORDER BY keyword when you want to sort the result, and return the first 3 records of the sorted result.

For SQL Server and MS Access:

# Sort the result reverse alphabetically by CustomerName, and return the first 3 records:
SELECT TOP 3 * FROM Customers
ORDER BY CustomerName DESC;


# The following SQL statement shows the equivalent example for MySQL:
SELECT * FROM Customers
ORDER BY CustomerName DESC
LIMIT 3;

# The following SQL statement shows the equivalent example for Oracle:
SELECT * FROM Customers
ORDER BY CustomerName DESC
FETCH FIRST 3 ROWS ONLY;


The SQL MIN() and MAX() Functions
- The MIN() function returns the smallest value of the selected column.
- The MAX() function returns the largest value of the selected column.

# Find the lowest price:
SELECT MIN(Price)
FROM Products;

#Find the highest price:
SELECT MAX(Price)
FROM Products;


Syntax
SELECT MIN(column_name)
FROM table_name
WHERE condition;

SELECT MAX(column_name)
FROM table_name
WHERE condition;


Set Column Name (Alias)
- When you use MIN() or MAX(), the returned column will be named MIN(field) or MAX(field) by default. To give the column a new name, use the AS keyword:

# Example:
SELECT MIN(Price) AS SmallestPrice
FROM Products;



The SQL COUNT() Function
- The COUNT() function returns the number of rows that matches a specified criterion.

# Find the total number of products in the Products table:
SELECT COUNT(*)
FROM Products;


Syntax
SELECT COUNT(column_name)
FROM table_name
WHERE condition;


Add a Where Clause
- You can add a WHERE clause to specify conditions:

# Find the number of products where Price is higher than 20:
SELECT COUNT(ProductID)
FROM Products
WHERE Price > 20;


Specify Column
- You can specify a column name instead of the asterix symbol (*).
- If you specify a column instead of (*), NULL values will not be counted.

# Find the number of products where the ProductName is not null:
SELECT COUNT(ProductName)
FROM Products;


Ignore Duplicates
- You can ignore duplicates by using the DISTINCT keyword in the COUNT function.
- If DISTINCT is specified, rows with the same value for the specified column will be counted as one.

# How many different prices are there in the Products table:
SELECT COUNT(DISTINCT Price)
FROM Products;


Use an Alias
- Give the counted column a name by using the AS keyword.

# Name the column "number of records":
SELECT COUNT(*) AS [number of records]
FROM Products;



The SQL SUM() Function
- The SUM() function returns the total sum of a numeric column.

# Return the sum of all Quantity fields in the OrderDetails table:
SELECT SUM(Quantity)
FROM OrderDetails;


Syntax
SELECT SUM(column_name)
FROM table_name
WHERE condition;


Add a Where Clause
- You can add a WHERE clause to specify conditions:

# Return the number of orders made for the product with ProductID 11:
SELECT SUM(Quantity)
FROM OrderDetails
WHERE ProductId = 11;


Use an Alias
- Give the summarized column a name by using the AS keyword.

# Name the column "total":
SELECT SUM(Quantity) AS total
FROM OrderDetails;


SUM() With an Expression
- The parameter inside the SUM() function can also be an expression.
- If we assume that each product in the OrderDetails column costs 10 dollars, we can find the total earnings in dollars by multiply each quantity with 10:

# Use an expression inside the SUM() function:
SELECT SUM(Quantity * 10)
FROM OrderDetails;


We can also join the OrderDetails table to the Products table to find the actual amount, instead of assuming it is 10 dollars:

# Join OrderDetails with Products, and use SUM() to find the total amount:
SELECT SUM(Price * Quantity)
FROM OrderDetails
LEFT JOIN Products ON OrderDetails.ProductID = Products.ProductID;




The SQL AVG() Function
- The AVG() function returns the average value of a numeric column.

# Find the average price of all products:
SELECT AVG(Price)
FROM Products;

Note: NULL values are ignored.


Syntax
SELECT AVG(column_name)
FROM table_name
WHERE condition;



Add a Where Clause
- You can add a WHERE clause to specify conditions:

# Return the average price of products in category 1:
SELECT AVG(Price)
FROM Products
WHERE CategoryID = 1;


Use an Alias
- Give the AVG column a name by using the AS keyword.

# Name the column "average price":
SELECT AVG(Price) AS [average price]
FROM Products;


Higher Than Average
- To list all records with a higher price than average, we can use the AVG() function in a sub query:

# Return all products with a higher price than the average price:
SELECT * FROM Products
WHERE price > (SELECT AVG(price) FROM Products);



The SQL LIKE Operator
- The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

There are two wildcards often used in conjunction with the LIKE operator:
- The percent sign % represents zero, one, or multiple characters
- The underscore sign _ represents one, single character
You will learn more about wildcards in the next chapter.

# Select all customers that starts with the letter "a":
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';


Syntax
SELECT column1, column2, ...
FROM table_name
WHERE columnN LIKE pattern;


The _ Wildcard
- The _ wildcard represents a single character.
- It can be any character or number, but each _ represents one, and only one, character.

# Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:
SELECT * FROM Customers
WHERE city LIKE 'L_nd__';


The % Wildcard
- The % wildcard represents any number of characters, even zero characters.

# Return all customers from a city that contains the letter 'L':
SELECT * FROM Customers
WHERE city LIKE '%L%';


Starts With
- To return records that starts with a specific letter or phrase, add the % at the end of the letter or phrase.

# Return all customers that starts with 'La':
SELECT * FROM Customers
WHERE CustomerName LIKE 'La%';


Tip: You can also combine any number of conditions using AND or OR operators.

# Return all customers that starts with 'a' or starts with 'b':
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%' OR CustomerName LIKE 'b%';


Ends With
- To return records that ends with a specific letter or phrase, add the % at the beginning of the letter or phrase.

# Return all customers that ends with 'a':
SELECT * FROM Customers
WHERE CustomerName LIKE '%a';


Tip: You can also combine "starts with" and "ends with":

# Return all customers that starts with "b" and ends with "s":

SELECT * FROM Customers
WHERE CustomerName LIKE 'b%s';


Contains
- To return records that contains a specific letter or phrase, add the % both before and after the letter or phrase.

# Return all customers that contains the phrase 'or'
SELECT * FROM Customers
WHERE CustomerName LIKE '%or%';


Combine Wildcards
- Any wildcard, like % and _ , can be used in combination with other wildcards.

# Return all customers that starts with "a" and are at least 3 characters in length:
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

# Return all customers that have "r" in the second position:
SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';


Without Wildcard
- If no wildcard is specified, the phrase has to have an exact match to return a result.

# Return all customers from Spain:
SELECT * FROM Customers
WHERE Country LIKE 'Spain';




SQL Wildcard Characters
- A wildcard character is used to substitute one or more characters in a string.
- Wildcard characters are used with the LIKE operator. The LIKE operator is used in a WHERE clause to search for a specified pattern in a column.

# Return all customers that starts with the letter 'a':
SELECT * FROM Customers
WHERE CustomerName LIKE 'a%';


Wildcard Characters
Symbol	Description
%	Represents zero or more characters
_	Represents a single character
[]	Represents any single character within the brackets *
^	Represents any character not in the brackets *
-	Represents any single character within the specified range *
{}	Represents any escaped character **

* Not supported in PostgreSQL and MySQL databases.
** Supported only in Oracle databases.


Using the % Wildcard
- The % wildcard represents any number of characters, even zero characters.

# Return all customers that ends with the pattern 'es':
SELECT * FROM Customers
WHERE CustomerName LIKE '%es';

# Return all customers that contains the pattern 'mer':
SELECT * FROM Customers
WHERE CustomerName LIKE '%mer%';


Using the _ Wildcard
- The _ wildcard represents a single character.
- It can be any character or number, but each _ represents one, and only one, character.

# Return all customers with a City starting with any character, followed by "ondon":
SELECT * FROM Customers
WHERE City LIKE '_ondon';

# Return all customers with a City starting with "L", followed by any 3 characters, ending with "on":
SELECT * FROM Customers
WHERE City LIKE 'L___on';


Using the [] Wildcard
- The [] wildcard returns a result if any of the characters inside gets a match.

# Return all customers starting with either "b", "s", or "p":
SELECT * FROM Customers
WHERE CustomerName LIKE '[bsp]%';


Using the - Wildcard
- The - wildcard allows you to specify a range of characters inside the [] wildcard.

# Return all customers starting with "a", "b", "c", "d", "e" or "f":
SELECT * FROM Customers
WHERE CustomerName LIKE '[a-f]%';


Combine Wildcards
- Any wildcard, like % and _ , can be used in combination with other wildcards.

# Return all customers that starts with "a" and are at least 3 characters in length:
SELECT * FROM Customers
WHERE CustomerName LIKE 'a__%';

# Return all customers that have "r" in the second position:
SELECT * FROM Customers
WHERE CustomerName LIKE '_r%';


Without Wildcard
- If no wildcard is specified, the phrase has to have an exact match to return a result.

# Return all customers from Spain:
SELECT * FROM Customers
WHERE Country LIKE 'Spain';


Microsoft Access Wildcards
- The Microsoft Access Database has some other wildcards:

Symbol	Description	Example
*	Represents zero or more characters	bl* finds bl, black, blue, and blob
?	Represents a single character	h?t finds hot, hat, and hit
[]	Represents any single character within the brackets	h[oa]t finds hot and hat, but not hit
!	Represents any character not in the brackets	h[!oa]t finds hit, but not hot and hat
-	Represents any single character within the specified range	c[a-b]t finds cat and cbt
#	Represents any single numeric character	2#5 finds 205, 215, 225, 235, 245, 255, 265, 275, 285, and 295





The SQL IN Operator
- The IN operator allows you to specify multiple values in a WHERE clause.
- The IN operator is a shorthand for multiple OR conditions.


# Return all customers from 'Germany', 'France', or 'UK'
SELECT * FROM Customers
WHERE Country IN ('Germany', 'France', 'UK');


Syntax
SELECT column_name(s)
FROM table_name
WHERE column_name IN (value1, value2, ...);


NOT IN
- By using the NOT keyword in front of the IN operator, you return all records that are NOT any of the values in the list.

# Return all customers that are NOT from 'Germany', 'France', or 'UK':
SELECT * FROM Customers
WHERE Country NOT IN ('Germany', 'France', 'UK');


IN (SELECT)
- You can also use IN with a subquery in the WHERE clause.
- With a subquery you can return all records from the main query that are present in the result of the subquery.

# Return all customers that have an order in the Orders table:
SELECT * FROM Customers
WHERE CustomerID IN (SELECT CustomerID FROM Orders);


NOT IN (SELECT)
- The result in the example above returned 74 records, that means that there are 17 customers that haven't placed any orders.
- Let us check if that is correct, by using the NOT IN operator.

# Return all customers that have NOT placed any orders in the Orders table:
SELECT * FROM Customers
WHERE CustomerID NOT IN (SELECT CustomerID FROM Orders);




The SQL BETWEEN Operator
- The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.
- The BETWEEN operator is inclusive: begin and end values are included.


# Selects all products with a price between 10 and 20:
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20;


>Syntax:
>
>SELECT column_name(s)
>
>FROM table_name
>
>WHERE column_name BETWEEN value1 AND value2;


NOT BETWEEN:
- To display the products outside the range of the previous example, use NOT BETWEEN:

# Example:
SELECT * FROM Products
WHERE Price NOT BETWEEN 10 AND 20;


BETWEEN with IN:
- The following SQL statement selects all products with a price between 10 and 20. In addition, the CategoryID must be either 1,2, or 3:

# Example:
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 20
AND CategoryID IN (1,2,3);


BETWEEN Text Values:
- The following SQL statement selects all products with a ProductName alphabetically between Carnarvon Tigers and Mozzarella di Giovanni:

# Example:
SELECT * FROM Products
WHERE ProductName BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;


The following SQL statement selects all products with a ProductName between Carnarvon Tigers and Chef Anton's Cajun Seasoning:

# Example:
SELECT * FROM Products
WHERE ProductName BETWEEN "Carnarvon Tigers" AND "Chef Anton's Cajun Seasoning"
ORDER BY ProductName;


NOT BETWEEN Text Values:
- The following SQL statement selects all products with a ProductName not between Carnarvon Tigers and Mozzarella di Giovanni:

# Example:
SELECT * FROM Products
WHERE ProductName NOT BETWEEN 'Carnarvon Tigers' AND 'Mozzarella di Giovanni'
ORDER BY ProductName;


BETWEEN Dates
- The following SQL statement selects all orders with an OrderDate between '01-July-1996' and '31-July-1996':

# Example:
SELECT * FROM Orders
WHERE OrderDate BETWEEN #07/01/1996# AND #07/31/1996#;

OR:

# Example:
SELECT * FROM Orders
WHERE OrderDate BETWEEN '1996-07-01' AND '1996-07-31';



SQL Aliases
- SQL aliases are used to give a table, or a column in a table, a temporary name.
- Aliases are often used to make column names more readable.
- An alias only exists for the duration of that query.
- An alias is created with the AS keyword.

# Example:
SELECT CustomerID AS ID
FROM Customers;


AS is Optional
- Actually, in most database languages, you can skip the AS keyword and get the same result:

# Example:
SELECT CustomerID ID
FROM Customers;


Syntax
When alias is used on column:

SELECT column_name AS alias_name
FROM table_name;

When alias is used on table:

SELECT column_name(s)
FROM table_name AS alias_name;


Alias for Columns
- The following SQL statement creates two aliases, one for the CustomerID column and one for the CustomerName column:

# Example:
SELECT CustomerID AS ID, CustomerName AS Customer
FROM Customers;


Using Aliases With a Space Character
- If you want your alias to contain one or more spaces, like "My Great Products", surround your alias with square brackets or double quotes.


# Using [square brackets] for aliases with space characters:
SELECT ProductName AS [My Great Products]
FROM Products;


# Using "double quotes" for aliases with space characters:
SELECT ProductName AS "My Great Products"
FROM Products;


Note: Some database systems allows both [] and "", and some only allows one of them.

Concatenate Columns
- The following SQL statement creates an alias named "Address" that combine four columns (Address, PostalCode, City and Country):

# Example:
SELECT CustomerName, Address + ', ' + PostalCode + ' ' + City + ', ' + Country AS Address
FROM Customers;


Note: To get the SQL statement above to work in MySQL use the following:

# MySQL Example:
SELECT CustomerName, CONCAT(Address,', ',PostalCode,', ',City,', ',Country) AS Address
FROM Customers;


Note: To get the SQL statement above to work in Oracle use the following:

# Oracle Example:
SELECT CustomerName, (Address || ', ' || PostalCode || ' ' || City || ', ' || Country) AS Address
FROM Customers;


Alias for Tables
- The same rules applies when you want to use an alias for a table.

# Refer to the Customers table as Persons instead:
SELECT * FROM Customers AS Persons;


It might seem useless to use aliases on tables, but when you are using more than one table in your queries, it can make the SQL statements shorter.

The following SQL statement selects all the orders from the customer with CustomerID=4 (Around the Horn). We use the "Customers" and "Orders" tables, and give them the table aliases of "c" and "o" respectively (Here we use aliases to make the SQL shorter):

# Example:
SELECT o.OrderID, o.OrderDate, c.CustomerName
FROM Customers AS c, Orders AS o
WHERE c.CustomerName='Around the Horn' AND c.CustomerID=o.CustomerID;


# The following SQL statement is the same as above, but without aliases:
SELECT Orders.OrderID, Orders.OrderDate, Customers.CustomerName
FROM Customers, Orders
WHERE Customers.CustomerName='Around the Horn' AND Customers.CustomerID=Orders.CustomerID;

Aliases can be useful when:
- There are more than one table involved in a query
- Functions are used in the query
- Column names are big or not very readable
- Two or more columns are combined together

