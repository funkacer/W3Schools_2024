What is SQL?
- SQL stands for Structured Query Language
- SQL lets you access and manipulate databases
- SQL became a standard of the American National Standards Institute (ANSI) in 1986, and of the International Organization for Standardization (ISO) in 1987

# Select all records from the Customers table:
SELECT * FROM Customers;

Database Tables
- A database most often contains one or more tables. Each table is identified by a name (e.g. "Customers" or "Orders"), and contain records (rows) with data.
- In this tutorial we will use the well-known Northwind sample database (included in MS Access and MS SQL Server).
- Below is a selection from the Customers table used in the examples:
- The table above contains five records (one for each customer) and seven columns (CustomerID, CustomerName, ContactName, Address, City, PostalCode, and Country).

Keep in Mind That...
- SQL keywords are NOT case sensitive: select is the same as SELECT
- In this tutorial we will write all SQL keywords in upper-case.

Semicolon after SQL Statements?
- Some database systems require a semicolon at the end of each SQL statement.
- Semicolon is the standard way to separate each SQL statement in database systems that allow more than one SQL statement to be executed in the same call to the server.
- In this tutorial, we will use semicolon at the end of each SQL statement.

Some of The Most Important SQL Commands
- SELECT - extracts data from a database
- UPDATE - updates data in a database
- DELETE - deletes data from a database
- INSERT INTO - inserts new data into a database
- CREATE DATABASE - creates a new database
- ALTER DATABASE - modifies a database
- CREATE TABLE - creates a new table
- ALTER TABLE - modifies a table
- DROP TABLE - deletes a table
- CREATE INDEX - creates an index (search key)
- DROP INDEX - deletes an index


The SQL SELECT Statement
- The SELECT statement is used to select data from a database.

# Return data from the Customers table:
SELECT CustomerName, City FROM Customers;


Syntax

SELECT column1, column2, ...
FROM table_name;

Here, column1, column2, ... are the field names of the table you want to select data from.
The table_name represents the name of the table you want to select data from.


Select ALL columns
- If you want to return all columns, without specifying every column name, you can use the SELECT * syntax:

# Return all the columns from the Customers table:
SELECT * FROM Customers;

The SQL SELECT DISTINCT Statement
- The SELECT DISTINCT statement is used to return only distinct (different) values.

# Select all the different countries from the "Customers" table:
SELECT DISTINCT Country FROM Customers;

Inside a table, a column often contains many duplicate values; and sometimes you only want to list the different (distinct) values.

Syntax

SELECT DISTINCT column1, column2, ...
FROM table_name;


SELECT Example Without DISTINCT
- If you omit the DISTINCT keyword, the SQL statement returns the "Country" value from all the records of the "Customers" table:

# Example:
SELECT Country FROM Customers;


Count Distinct
- By using the DISTINCT keyword in a function called COUNT, we can return the number of different countries.

# Example:
SELECT COUNT(DISTINCT Country) FROM Customers;


Note: The COUNT(DISTINCT column_name) is not supported in Microsoft Access databases.
- Here is a workaround for MS Access:

SELECT Count(*) AS DistinctCountries
FROM (SELECT DISTINCT Country FROM Customers);

You will learn about the COUNT function later in this tutorial.


The SQL WHERE Clause
- The WHERE clause is used to filter records.
- It is used to extract only those records that fulfill a specified condition.

# Select all customers from Mexico:
SELECT * FROM Customers
WHERE Country='Mexico';

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition;

Note: The WHERE clause is not only used in SELECT statements, it is also used in UPDATE, DELETE, etc.!

Text Fields vs. Numeric Fields
- SQL requires single quotes around text values (most database systems will also allow double quotes).
- However, numeric fields should not be enclosed in quotes:

# Example:
SELECT * FROM Customers
WHERE CustomerID=1;


Operators in The WHERE Clause
- You can use other operators than the = operator to filter the search.

# Select all customers with a CustomerID greater than 80:
SELECT * FROM Customers
WHERE CustomerID > 80;

The following operators can be used in the WHERE clause:

Operator	Description	Example
=	Equal	
>	Greater than	
<	Less than	
>=	Greater than or equal	
<=	Less than or equal	
<>	Not equal. Note: In some versions of SQL this operator may be written as !=	
BETWEEN	Between a certain range	
LIKE	Search for a pattern	
IN	To specify multiple possible values for a column




The SQL ORDER BY
- The ORDER BY keyword is used to sort the result-set in ascending or descending order.

# Sort the products by price:
SELECT * FROM Products
ORDER BY Price;

Syntax
SELECT column1, column2, ...
FROM table_name
ORDER BY column1, column2, ... ASC|DESC;


DESC
- The ORDER BY keyword sorts the records in ascending order by default. To sort the records in descending order, use the DESC keyword.

# Sort the products from highest to lowest price:
SELECT * FROM Products
ORDER BY Price DESC;


Order Alphabetically
- For string values the ORDER BY keyword will order alphabetically:

# Sort the products alphatbetically by ProductName:
SELECT * FROM Products
ORDER BY ProductName;


Alphabetically DESC
- To sort the table reverse alphabetically, use the DESC keyword:

# Sort the products by ProductName in reverse order:
SELECT * FROM Products
ORDER BY ProductName DESC;


ORDER BY Several Columns
- The following SQL statement selects all customers from the "Customers" table, sorted by the "Country" and the "CustomerName" column. This means that it orders by Country, but if some rows have the same Country, it orders them by CustomerName:

# Example:
SELECT * FROM Customers
ORDER BY Country, CustomerName;


Using Both ASC and DESC
- The following SQL statement selects all customers from the "Customers" table, sorted ascending by the "Country" and descending by the "CustomerName" column:

# Example:
SELECT * FROM Customers
ORDER BY Country ASC, CustomerName DESC;



The SQL AND Operator
- The WHERE clause can contain one or many AND operators.
- The AND operator is used to filter records based on more than one condition, like if you want to return all customers from Spain that starts with the letter 'G':

# Select all customers from Spain that starts with the letter 'G':
SELECT *
FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%';

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE condition1 AND condition2 AND condition3 ...;


AND vs OR
- The AND operator displays a record if all the conditions are TRUE.
- The OR operator displays a record if any of the conditions are TRUE.


All Conditions Must Be True
- The following SQL statement selects all fields from Customers where Country is "Germany" AND City is "Berlin" AND PostalCode is higher than 12000:

# Example:
SELECT * FROM Customers
WHERE Country = 'Germany'
AND City = 'Berlin'
AND PostalCode > 1200;


Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.

# Select all Spanish customers that starts with either "G" or "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


Without parenthesis, the select statement will return all customers from Spain that starts with a "G", plus all customers that starts with an "R", regardless of the country value:

# Select all customers that either: are from Spain and starts with either "G", or starts with the letter "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';


The SQL OR Operator
- The WHERE clause can contain one or more OR operators.
- The OR operator is used to filter records based on more than one condition, like if you want to return all customers from Germany but also those from Spain:

# Select all customers from Germany or Spain:
SELECT *
FROM Customers
WHERE Country = 'Germany' OR Country = 'Spain';


> Syntax:
> SELECT column1, column2, ...
> FROM table_name
> WHERE condition1 OR condition2 OR condition3 ...;


OR vs AND
- The OR operator displays a record if any of the conditions are TRUE.
- The AND operator displays a record if all the conditions are TRUE.


At Least One Condition Must Be True
- The following SQL statement selects all fields from Customers where either City is "Berlin", CustomerName starts with the letter "G" or Country is "Norway":

# Example
SELECT * FROM Customers
WHERE City = 'Berlin' OR CustomerName LIKE 'G%' OR Country = 'Norway';


Combining AND and OR
- You can combine the AND and OR operators.
- The following SQL statement selects all customers from Spain that starts with a "G" or an "R".
- Make sure you use parenthesis to get the correct result.

# Select all Spanish customers that starts with either "G" or "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND (CustomerName LIKE 'G%' OR CustomerName LIKE 'R%');


Without parenthesis, the select statement will return all customers from Spain that starts with a "G", plus all customers that starts with an "R", regardless of the country value:

# Select all customers that either: are from Spain and starts with either "G", or starts with the letter "R":
SELECT * FROM Customers
WHERE Country = 'Spain' AND CustomerName LIKE 'G%' OR CustomerName LIKE 'R%';



The NOT Operator
- The NOT operator is used in combination with other operators to give the opposite result, also called the negative result.
- In the select statement below we want to return all customers that are NOT from Spain:

# Select only the customers that are NOT from Spain:
SELECT * FROM Customers
WHERE NOT Country = 'Spain';

In the example above, the NOT operator is used in combination with the = operator, but it can be used in combination with other comparison and/or logical operators. See examples below.

Syntax
SELECT column1, column2, ...
FROM table_name
WHERE NOT condition;


NOT LIKE

# Select customers that does not start with the letter 'A':
SELECT * FROM Customers
WHERE CustomerName NOT LIKE 'A%';


NOT BETWEEN

# Select customers with a customerID not between 10 and 60:
SELECT * FROM Customers
WHERE CustomerID NOT BETWEEN 10 AND 60;


NOT IN

# Select customers that are not from Paris or London:
SELECT * FROM Customers
WHERE City NOT IN ('Paris', 'London');


NOT Greater Than

# Select customers with a CustomerId not greater than 50:
SELECT * FROM Customers
WHERE NOT CustomerID > 50;

Note: There is a not-greater-then operator: !> that would give you the same result.


NOT Less Than

# Select customers with a CustomerID not less than 50:
SELECT * FROM Customers
WHERE NOT CustomerId < 50;

Note: There is a not-less-then operator: !< that would give you the same result.


SQL NULL Values
- What is a NULL Value?
- A field with a NULL value is a field with no value.
- If a field in a table is optional, it is possible to insert a new record or update a record without adding a value to this field. Then, the field will be saved with a NULL value.
- Note: A NULL value is different from a zero value or a field that contains spaces. A field with a NULL value is one that has been left blank during record creation!

How to Test for NULL Values?
- It is not possible to test for NULL values with comparison operators, such as =, <, or <>.
- We will have to use the IS NULL and IS NOT NULL operators instead.

> IS NULL Syntax
> SELECT column_names
> FROM table_name
> WHERE column_name IS NULL;

> IS NOT NULL Syntax
> SELECT column_names
> FROM table_name
> WHERE column_name IS NOT NULL;


The IS NULL Operator
- The IS NULL operator is used to test for empty values (NULL values).

# The following SQL lists all customers with a NULL value in the "Address" field:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NULL;

Tip: Always use IS NULL to look for NULL values.

The IS NOT NULL Operator
- The IS NOT NULL operator is used to test for non-empty values (NOT NULL values).

# The following SQL lists all customers with a value in the "Address" field:
SELECT CustomerName, ContactName, Address
FROM Customers
WHERE Address IS NOT NULL;

