ALTER USER zprac_vse2 WITH PASSWORD '******';

SELECT version();

Note: Always end SQL statements with a semicolon ;

SELECT customer_name, country FROM customers;

SELECT * FROM customers;

SELECT DISTINCT country FROM customers;

SELECT COUNT(DISTINCT country) FROM customers; 


-- WHERE;

SELECT * FROM customers
WHERE city = 'London';

SELECT * FROM customers
WHERE customer_id = 19;

SELECT * FROM customers
WHERE customer_id > 80;


--ORDER BY;

SELECT * FROM products
ORDER BY price;

SELECT * FROM products
ORDER BY price DESC;

SELECT * FROM products
ORDER BY product_name;

SELECT * FROM products
ORDER BY product_name DESC;


--LIMIT;

SELECT * FROM customers
LIMIT 20;

SELECT * FROM customers
LIMIT 20 OFFSET 40;


--MIN(), MAX(), AS;

SELECT MIN(price)
FROM products;

SELECT MAX(price)
FROM products;

SELECT MIN(price) AS lowest_price
FROM products;


--COUNT();

SELECT COUNT(customer_id)
FROM customers;

--Note: NULL values are not counted.;

--By specifying a WHERE clause, you can e.g. return the number of customers that comes from London:;

SELECT COUNT(customer_id)
FROM customers
WHERE city = 'London';


--SUM();

SELECT SUM(quantity)
FROM order_details;

Note: NULL values are ignored.;


--AVG();

SELECT AVG(price)
FROM products;

--Note: NULL values are ignored.;

--With 2 Decimals:;
--We can use the ::NUMERIC operator to round the average price to a number with 2 decimals:;

SELECT AVG(price)::NUMERIC(10,2)
FROM products;


--LIKE;

--There are two wildcards often used in conjunction with the LIKE operator:;
--'%' The percent sign represents zero, one, or multiple characters;
--'_' The underscore sign represents one, single character;

--Return all customers with a name that starts with the letter 'A':;
SELECT * FROM customers
WHERE customer_name LIKE 'A%';

--Return all customers with a name that contains the letter 'A':;
SELECT * FROM customers
WHERE customer_name LIKE '%A%';

--Return all customers with a name that ends with the phrase 'en':;
SELECT * FROM customers
WHERE customer_name LIKE '%en';

--Return all customers from a city that starts with 'L' followed by one wildcard character, then 'nd' and then two wildcard characters:;
SELECT * FROM customers
WHERE city LIKE 'L_nd__';
--returns cities London, Lander;

--Note: The LIKE operator is case sensitive, if you want to do a case insensitive search, use the ILIKE operator instead.;


--ILIKE;

--Return all customers with a name that contains the letter 'A' or 'a':;
SELECT * FROM customers
WHERE customer_name ILIKE '%A%';


--IN, NOT IN;

--Return all customers from 'Germany', France' or 'UK':;
SELECT * FROM customers
WHERE country IN ('Germany', 'France', 'UK');

--Return all customers that are NOT from 'Germany', France' or 'UK':;
SELECT * FROM customers
WHERE country NOT IN ('Germany', 'France', 'UK');


--IN (SELECT);

--You can also us a SELECT statement inside the parenthesis to return all records that are in the result of the SELECT statement.;

--Return all customers that have an order in the orders table:;
SELECT * FROM customers
WHERE customer_id IN (SELECT customer_id FROM orders);


--NOT IN (SELECT);

--The result in the example above returned 89 records, that means that there are 2 customers that haven't placed any orders.;
--Let us check if that is correct, by using the NOT IN operator.;

--Return all customers that have NOT placed any orders in the orders table:;
SELECT * FROM customers
WHERE customer_id NOT IN (SELECT customer_id FROM orders);



--BETWEEN;

--The BETWEEN operator selects values within a given range. The values can be numbers, text, or dates.;
--The BETWEEN operator is inclusive: begin and end values are included.;

--Select all products with a price between 10 and 15:;
SELECT * FROM Products
WHERE Price BETWEEN 10 AND 15;

--The BETWEEN operator can also be used on text values.;
--The result returns all records that are alphabetically between the specified values.;

--Select all products between 'Pavlova' and 'Tofu':;
SELECT * FROM Products
WHERE product_name BETWEEN 'Pavlova' AND 'Tofu';

--Same example as above, but we sort it by product_name:;
SELECT * FROM Products
WHERE product_name BETWEEN 'Pavlova' AND 'Tofu'
ORDER BY product_name;

--The BETWEEN operator can also be used on date values.;
SELECT * FROM orders
WHERE order_date BETWEEN '2023-04-12' AND '2023-05-05';


--AS, ||;

--SQL aliases are used to give a table, or a column in a table, a temporary name.;

--Using aliases for columns:;
SELECT customer_id AS id
FROM customers;

--AS is Optional;

--Same result without AS:;
SELECT customer_id id
FROM customers;

--Concatenate two fields and call them product:;
SELECT product_name || unit AS product
FROM products;

--Note: In the result of the example above we are missing a space between product_name and unit. To add a space when concatenating, use || ' ' ||.;

--Concatenate, with space:;
SELECT product_name || ' ' || unit AS product
FROM products;

--If you want your alias to contain one or more spaces, like "My Great Products", surround your alias with double quotes.;

--Surround your alias with double quotes:;
SELECT product_name AS "My Great Products"
FROM products;


--JOIN;

--A JOIN clause is used to combine rows from two or more tables, based on a related column between them.;

--Join products to categories using the category_id column:;
SELECT product_id, product_name, category_name
FROM products
INNER JOIN categories ON products.category_id = categories.category_id;

--INNER JOIN: Returns records that have matching values in both tables;
--LEFT JOIN: Returns all records from the left table, and the matched records from the right table;
--RIGHT JOIN: Returns all records from the right table, and the matched records from the left table;
--FULL JOIN: Returns all records when there is a match in either left or right table;

--Note: JOIN and INNER JOIN will give the same result.
--INNER is the default join type for JOIN, so when you write JOIN the parser actually writes INNER JOIN.

--Join testproducts to categories using the category_id column:;
SELECT testproduct_id, product_name, category_name
FROM testproducts
INNER JOIN categories ON testproducts.category_id = categories.category_id;


--LEFT JOIN;

--The LEFT JOIN keyword selects ALL records from the "left" table, and the matching records from the "right" table.;
--The result is 0 records from the right side if there is no match.;

--Join testproducts to categories using the category_id column:;
SELECT testproduct_id, product_name, category_name
FROM testproducts
LEFT JOIN categories ON testproducts.category_id = categories.category_id;

--Note: LEFT JOIN and LEFT OUTER JOIN will give the same result.;
--OUTER is the default join type for LEFT JOIN, so when you write LEFT JOIN the parser actually writes LEFT OUTER JOIN.;


--RIGHT JOIN;

--The RIGHT JOIN keyword selects ALL records from the "right" table, and the matching records from the "left" table.;
--The result is 0 records from the left side if there is no match.;

--Join testproducts to categories using the category_id column:;
SELECT testproduct_id, product_name, category_name
FROM testproducts
RIGHT JOIN categories ON testproducts.category_id = categories.category_id;

--Note: RIGHT JOIN and RIGHT OUTER JOIN will give the same result.;
--OUTER is the default join type for RIGHT JOIN, so when you write RIGHT JOIN the parser actually writes RIGHT OUTER JOIN.;


--FULL JOIN;

--The FULL JOIN keyword selects ALL records from both tables, even if there is not a match.;
--For rows with a match the values from both tables are available, if there is not a match the empty fields will get the value NULL.;

--Join testproducts to categories using the category_id column:;
SELECT testproduct_id, product_name, category_name
FROM testproducts
FULL JOIN categories ON testproducts.category_id = categories.category_id;

--Note: FULL JOIN and FULL OUTER JOIN will give the same result.;
--OUTER is the default join type for FULL JOIN, so when you write FULL JOIN the parser actually writes FULL OUTER JOIN.;


--CROSS JOIN (kartézský součin);

--The CROSS JOIN keyword matches ALL records from the "left" table with EACH record from the "right" table.;
--That means that all records from the "right" table will be returned for each record in the "left" table.;
--This way of joining can potentially return very large table, and you should not use it if you do not have to.;

--Note: The CROSS JOIN method will return ALL categories for EACH testproduct, meaning that it will return 80 rows (10 * 8).;
--Join testproducts to categories using the CROSS JOIN keyword:;
SELECT testproduct_id, product_name, category_name
FROM testproducts
CROSS JOIN categories;



--UNION;

--The UNION operator is used to combine the result-set of two or more queries.;
--The queries in the union must follow these rules:;
-- They must have the same number of columns;
-- The columns must have the same data types;
-- The columns must be in the same order;

--Combine products and testproducts using the UNION operator:;
SELECT product_id, product_name
FROM products
UNION
SELECT testproduct_id, product_name
FROM testproducts
ORDER BY product_id;


--UNION vs UNION ALL;

--With the UNION operator, if some rows in the two queries returns the exact same result, only one row will be listed, because UNION selects only distinct values.;
--Use UNION ALL to return duplicate values.;

--Example - UNION:;
SELECT product_id
FROM products
UNION
SELECT testproduct_id
FROM testproducts
ORDER BY product_id;

--Example - UNION ALL:;
SELECT product_id
FROM products
UNION ALL
SELECT testproduct_id
FROM testproducts
ORDER BY product_id;



--GROUP BY;

--The GROUP BY clause groups rows that have the same values into summary rows, like "find the number of customers in each country".;
--The GROUP BY clause is often used with aggregate functions like COUNT(), MAX(), MIN(), SUM(), AVG() to group the result-set by one or more columns.;

--Lists the number of customers in each country:;
SELECT COUNT(customer_id), country
FROM customers
GROUP BY country;

--GROUP BY With JOIN;
--The following SQL statement lists the number of orders made by each customer:;
SELECT customers.customer_name, COUNT(orders.order_id)
FROM orders
LEFT JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_name;

--List the number of customers in each country:;
SELECT 
COUNT
(customer_id), country FROM customers
GROUP BY country;



--HAVING;

--The HAVING clause was added to SQL because the WHERE clause cannot be used with aggregate functions.;
--Aggregate functions are often used with GROUP BY clauses, and by adding HAVING we can write condition like we do with WHERE clauses.

--List only countries that are represented more than 5 times:;
SELECT COUNT(customer_id), country
FROM customers
GROUP BY country
HAVING COUNT(customer_id) > 5;

--The following SQL statement lists only orders with a total price of 400$ or more:;
SELECT order_details.order_id, SUM(products.price)
FROM order_details
LEFT JOIN products ON order_details.product_id = products.product_id
GROUP BY order_id
HAVING SUM(products.price) > 400.00;

--Lists customers that have ordered for 1000$ or more:;
SELECT customers.customer_name, SUM(products.price)
FROM order_details
LEFT JOIN products ON order_details.product_id = products.product_id
LEFT JOIN orders ON order_details.order_id = orders.order_id
LEFT JOIN customers ON orders.customer_id = customers.customer_id
GROUP BY customer_name
HAVING SUM(products.price) > 1000.00;



--EXISTS;

--The EXISTS operator is used to test for the existence of any record in a sub query.;
--The EXISTS operator returns TRUE if the sub query returns one or more records.;

--Return all customers that is represented in the orders table:;
SELECT customers.customer_name
FROM customers
WHERE EXISTS (
  SELECT order_id
  FROM orders
  WHERE customer_id = customers.customer_id
);

--The result in example above showed that 89 customers had at least one order in the orders table.;



--NOT EXISTS;

--To check which customers that do not have any orders, we can use the NOT operator together with the EXISTS operator :

--Return all customers that is NOT represented in the orders table:
SELECT customers.customer_name
FROM customers
WHERE NOT EXISTS (
  SELECT order_id
  FROM orders
  WHERE customer_id = customers.customer_id
);

--The result in example above showed that 2 customers had no order in the orders table.;



--ANY;

--The ANY operator allows you to perform a comparison between a single column value and a range of other values.
--The ANY operator:;
-- returns a Boolean value as a result;
-- returns TRUE if ANY of the sub query values meet the condition;
-- ANY means that the condition will be true if the operation is true for any of the values in the range.;

--List products that have ANY records in the order_details table with a quantity larger than 120:;
SELECT product_name
FROM products
WHERE product_id = ANY (
  SELECT product_id
  FROM order_details
  WHERE quantity > 120
);


--ALL;

--The ALL operator:;
-- returns a Boolean value as a result;
-- returns TRUE if ALL of the sub query values meet the condition;
-- is used with SELECT, WHERE and HAVING statements;
--ALL means that the condition will be true only if the operation is true for all values in the range.;

--List the products if ALL the records in the order_details with quantity larger than 10.
--Note: This will of course return FALSE because the quantity column has many different values (not only the value of 10):
SELECT product_name
FROM products
WHERE product_id = ALL (
  SELECT product_id
  FROM order_details
  WHERE quantity > 10
);


--CASE;

--The CASE expression goes through conditions and returns a value when the first condition is met (like an if-then-else statement).;
--Once a condition is true, it will stop reading and return the result. If no conditions are true, it returns the value in the ELSE clause.;
--If there is no ELSE part and no conditions are true, it returns NULL.;

--Return specific values if the price meets a specific condition:;
SELECT product_name,
CASE
  WHEN price < 10 THEN 'Low price product'
  WHEN price > 50 THEN 'High price product'
ELSE
  'Normal product'
END
FROM products;