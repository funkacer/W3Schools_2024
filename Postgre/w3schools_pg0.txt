--Create Table;

--The following SQL statement will create a table named cars in your PostgreSQL database:;
CREATE TABLE cars (
  brand VARCHAR(255),
  model VARCHAR(255),
  year INT
);


--Display Table;

--You can "display" the empty table you just created with another SQL statement:;
SELECT * FROM cars;


-- Insert Into;

-- To insert data into a table in PostgreSQL, we use the INSERT INTO statement.;
-- The following SQL statement will insert one row of data into the cars table you created in the previous chapter.
INSERT INTO cars (brand, model, year)
VALUES ('Ford', 'Mustang', 1964);


--SQL Statement Explained:
--As you can see in the SQL statement above, string values must be written with apostrophes.
--Numeric values can be written without apostrophes, but you can include them if you want.


--Insert Multiple Rows

--To insert multiple rows of data, we use the same INSERT INTO statement, but with multiple values:
INSERT INTO cars (brand, model, year)
VALUES
  ('Volvo', 'p1800', 1968),
  ('BMW', 'M1', 1978),
  ('Toyota', 'Celica', 1975);


--Select Data
--To retrieve data from a data base, we use the SELECT statement.

--Specify Columns
--By specifying the column names, we can choose which columns to select:
SELECT brand, year FROM cars;


--Return ALL Columns
--Specify a * instead of the column names to select all columns:
SELECT * FROM cars;


--The ALTER TABLE Statement

--To add a column to an existing table, we have to use the ALTER TABLE statement.
--The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
--The ALTER TABLE statement is also used to add and drop various constraints on an existing table.


--ADD COLUMN
--We want to add a column named color to our cars table.

--When adding columns we must also specify the data type of the column. 
--Our color column will be a string, and we specify string types with the VARCHAR keyword.
--We also want to restrict the number of characters to 255:
ALTER TABLE cars
ADD color VARCHAR(255);



--The UPDATE Statement

--The UPDATE statement is used to modify the value(s) in existing records in a table.
--Set the color of the Volvo to 'red':
UPDATE cars
SET color = 'red'
WHERE brand = 'Volvo';
--Result:
UPDATE 1

--Note: Be careful with the WHERE clause, in the example above ALL rows where brand = 'Volvo' gets updated.

--Warning! Remember WHERE
--Be careful when updating records. If you omit the WHERE clause, ALL records will be updated!

--Without the WHERE clause, ALL records will be updated:
UPDATE cars
SET color = 'red';

--Result:
UPDATE 4

--Which means that all 4 row was affected by the UPDATE statement.


--Update Multiple Columns

--To update more than one column, separate the name/value pairs with a comma ,:
--Update color and year for the Toyota:
UPDATE cars
SET color = 'white', year = 1970
WHERE brand = 'Toyota';

--Result:
UPDATE 1



--The ALTER TABLE Statement

--To change the data type, or the size of a table column we have to use the ALTER TABLE statement.
-- The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
-- The ALTER TABLE statement is also used to add and drop various constraints on an existing table.

--ALTER COLUMN

--We want to change the data type of the year column of the cars table from INT to VARCAHR(4).
--To modify a column, use the ALTER COLUMN statement and the TYPE keyword followed by the new data type:

--Change the year column from INT to VARCHAR(4):
ALTER TABLE cars
ALTER COLUMN year TYPE VARCHAR(4);

--Note: Some data types cannot be converted if the column has value. E.g. numbers can always be converted to text, but text cannot always be converted to numbers.


--Change Maximum Allowed Characters

--We also want to change the maximum number of characters allowed in the color column of the cars table.
--Use the same syntax as above, use the ALTER COLUMN statement and the TYPE keyword followed by the new data type:

--Change the color column from VARCHAR(255) to VARCHAR(30):
ALTER TABLE cars
ALTER COLUMN color TYPE VARCHAR(30);


--The ALTER TABLE Statement

--To remove a column from a table, we have to use the ALTER TABLE statement.
-- The ALTER TABLE statement is used to add, delete, or modify columns in an existing table.
-- The ALTER TABLE statement is also used to add and drop various constraints on an existing table.

--DROP COLUMN

--We want to remove the column named color from the cars table.
--To remove a column, use the DROP COLUMN statement:

--Remove the color column:
ALTER TABLE cars
DROP COLUMN color;



--The DELETE Statement

--The DELETE statement is used to delete existing records in a table.

--Note: Be careful when deleting records in a table! Notice the WHERE clause in the DELETE statement. The WHERE clause specifies which record(s) should be deleted.

--If you omit the WHERE clause, all records in the table will be deleted!.

--To delete the record(s) where brand is 'Volvo', use this statement:

--Delete all records where brand is 'Volvo':
DELETE FROM cars
WHERE brand = 'Volvo';

--Result
--DELETE 1
--Which means that 1 row was deleted.


-- Delete All Records

--It is possible to delete all rows in a table without deleting the table. This means that the table structure, attributes, and indexes will be intact.
--The following SQL statement deletes all rows in the cars table, without deleting the table:

-Delete all records in the cars table:
DELETE FROM cars;

--Result
--DELETE 3
--Which means that all 3 rows were deleted.


--TRUNCATE TABLE
--Because we omit the WHERE clause in the DELETE statement above, all records will be deleted from the cars table.

--The same would have been achieved by using the TRUNCATE TABLE statement:

--Delete all records in the cars table:
TRUNCATE TABLE cars;

--Result
--TRUNCATE TABLE



--The DROP TABLE Statement


--The DROP TABLE statement is used to drop an existing table in a database.
--Note: Be careful before dropping a table. Deleting a table will result in loss of all information stored in the table!

--The following SQL statement drops the existing table cars:
--Delete the cars table:
DROP TABLE cars;

--Result
--DROP TABLE
