What are ufuncs?
- ufuncs stands for "Universal Functions" and they are NumPy functions that operate on the ndarray object.

Why use ufuncs?
- ufuncs are used to implement vectorization in NumPy which is way faster than iterating over elements.
- They also provide broadcasting and additional methods like reduce, accumulate etc. that are very helpful for computation.

ufuncs also take additional arguments, like:
- where boolean array or condition defining where the operations should take place.
- dtype defining the return type of elements.
- out output array where the return value should be copied.


What is Vectorization?
- Converting iterative statements into a vector based operation is called vectorization.
- It is faster as modern CPUs are optimized for such operations.

# Add the Elements of Two Lists
# Without ufunc, we can use Python's built-in zip() method:
x = [1, 2, 3, 4]
y = [4, 5, 6, 7]
z = []
for i, j in zip(x, y):
  z.append(i + j)
print(z)


NumPy has a ufunc for this, called add(x, y) that will produce the same result.

# With ufunc, we can use the add() function:
import numpy as np
x = [1, 2, 3, 4]
y = [4, 5, 6, 7]
z = np.add(x, y)
print(z)


How To Create Your Own ufunc
- To create your own ufunc, you have to define a function, like you do with normal functions in Python, then you add it to your NumPy ufunc library with the frompyfunc() method.

The frompyfunc() method takes the following arguments:
1. function - the name of the function.
2. inputs - the number of input arguments (arrays).
3. outputs - the number of output arrays.


# Create your own ufunc for addition:
import numpy as np
def myadd(x, y):
  return x+y
myadd = np.frompyfunc(myadd, 2, 1)
print(myadd([1, 2, 3, 4], [5, 6, 7, 8]))


Check if a Function is a ufunc
- Check the type of a function to check if it is a ufunc or not.
- A ufunc should return <class 'numpy.ufunc'>.

# Check if a function is a ufunc:
import numpy as np
print(type(np.add))


If it is not a ufunc, it will return another type, like this built-in NumPy function for joining two or more arrays:

# Check the type of another function: concatenate():
import numpy as np
print(type(np.concatenate))


If the function is not recognized at all, it will return an error:

# Check the type of something that does not exist. This will produce an error:
import numpy as np
print(type(np.blahblah))


To test if the function is a ufunc in an if statement, use the numpy.ufunc value (or np.ufunc if you use np as an alias for numpy):

# Use an if statement to check if the function is a ufunc or not:
import numpy as np
if type(np.add) == np.ufunc:
  print('add is ufunc')
else:
  print('add is not ufunc')


Simple Arithmetic
- You could use arithmetic operators + - * / directly between NumPy arrays, but this section discusses an extension of the same where we have functions that can take any array-like objects e.g. lists, tuples etc. and perform arithmetic conditionally.
- Arithmetic Conditionally: means that we can define conditions where the arithmetic operation should happen.
- All of the discussed arithmetic functions take a where parameter in which we can specify that condition.


Addition
- The add() function sums the content of two arrays, and return the results in a new array.

# Add the values in arr1 to the values in arr2:
import numpy as np
arr1 = np.array([10, 11, 12, 13, 14, 15])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.add(arr1, arr2)
print(newarr)

The example above will return [30 32 34 36 38 40] which is the sums of 10+20, 11+21, 12+22 etc.


Subtraction
- The subtract() function subtracts the values from one array with the values from another array, and return the results in a new array.

# Subtract the values in arr2 from the values in arr1:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.subtract(arr1, arr2)
print(newarr)

The example above will return [-10 -1 8 17 26 35] which is the result of 10-20, 20-21, 30-22 etc.


Multiplication
- The multiply() function multiplies the values from one array with the values from another array, and return the results in a new array.

# Multiply the values in arr1 with the values in arr2:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([20, 21, 22, 23, 24, 25])
newarr = np.multiply(arr1, arr2)
print(newarr)

The example above will return [200 420 660 920 1200 1500] which is the result of 10*20, 20*21, 30*22 etc.


Division
- The divide() function divides the values from one array with the values from another array, and return the results in a new array.

# Divide the values in arr1 with the values in arr2:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 10, 8, 2, 33])
newarr = np.divide(arr1, arr2)
print(newarr)

The example above will return [3.33333333 4. 3. 5. 25. 1.81818182] which is the result of 10/3, 20/5, 30/10 etc.


Power
- The power() function rises the values from the first array to the power of the values of the second array, and return the results in a new array.

# Raise the valules in arr1 to the power of values in arr2:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 5, 6, 8, 2, 33])
newarr = np.power(arr1, arr2)
print(newarr)

The example above will return [1000 3200000 729000000 6553600000000 2500 0] which is the result of 10*10*10, 20*20*20*20*20, 30*30*30*30*30*30 etc.


Remainder
-Both the mod() and the remainder() functions return the remainder of the values in the first array corresponding to the values in the second array, and return the results in a new array.

# Return the remainders:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.mod(arr1, arr2)
print(newarr)


The example above will return [1 6 3 0 0 27] which is the remainders when you divide 10 with 3 (10%3), 20 with 7 (20%7) 30 with 9 (30%9) etc.


You get the same result when using the remainder() function:

# Return the remainders:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.remainder(arr1, arr2)
print(newarr)



Quotient and Mod
- The divmod() function return both the quotient and the the mod. The return value is two arrays, the first array contains the quotient and second array contains the mod.

# Return the quotient and mod:
import numpy as np
arr1 = np.array([10, 20, 30, 40, 50, 60])
arr2 = np.array([3, 7, 9, 8, 2, 33])
newarr = np.divmod(arr1, arr2)
print(newarr)

The example above will return:
(array([3, 2, 3, 5, 25, 1]), array([1, 6, 3, 0, 0, 27]))
- The first array represents the quotients, (the integer value when you divide 10 with 3, 20 with 7, 30 with 9 etc.
- The second array represents the remainders of the same divisions.


Absolute Values
- Both the absolute() and the abs() functions do the same absolute operation element-wise but we should use absolute() to avoid confusion with python's inbuilt math.abs()

# Return the quotient and mod:
import numpy as np
arr = np.array([-1, -2, 1, 2, 3, -4])
newarr = np.absolute(arr)
print(newarr)

The example above will return [1 2 1 2 3 4].



Rounding Decimals

There are primarily five ways of rounding off decimals in NumPy:
- truncation
- fix
- rounding
- floor
- ceil

Truncation
- Remove the decimals, and return the float number closest to zero. Use the trunc() and fix() functions.

# Truncate elements of following array:
import numpy as np
arr = np.trunc([-3.1666, 3.6667])
print(arr)

# Same example, using fix():
import numpy as np
arr = np.fix([-3.1666, 3.6667])
print(arr)


Rounding
- The around() function increments preceding digit or decimal by 1 if >=5 else do nothing.
- E.g. round off to 1 decimal point, 3.16666 is 3.2

# Round off 3.1666 to 2 decimal places:
import numpy as np
arr = np.around(3.1666, 2)
print(arr)

# Tohle ale nefunguje, melo by to byt 3.3.
import numpy as np
print(np.around(3.25, 1)) # 3.2  (Voznica 3.3)
print(np.around(2.5, 0)) # 2 (Voznica 3)
print(np.around(2.51, 0)) # 3  (Voznica 3)


/*
import numpy as np

def rd(x,y=0):
    ''' A classical mathematical rounding by Voznica '''
    try:
        m = int('1'+'0'*y) # multiplier - how many positions to the right
        q = x*m # shift to the right by multiplier
        c = int(q) # new number
        i = int( (q-c)*10 ) # indicator number on the right
        if i >= 5:
            c += 1
        result = '{num:.{prec}f}'.format(num=c/m,prec=y)
    except:
        result = ''
    return result

arr = np.around(3.25, 1) #3.2

print(arr)
print(rd(3.25,1)) #3.3
print(rd(3.25,1).__class__)
print(float(rd(3.25,1))) #3.3
print(float(rd(3.25,1)).__class__)
*/


Floor
- The floor() function rounds off decimal to nearest lower integer.
- E.g. floor of 3.166 is 3.

# Floor the elements of following array:
import numpy as np
arr = np.floor([-3.1666, 3.6667])
print(arr)


Ceil
- The ceil() function rounds off decimal to nearest upper integer.
- E.g. ceil of 3.166 is 4.

# Ceil the elements of following array:
import numpy as np
arr = np.ceil([-3.1666, 3.6667])
print(arr)



NumPy Logs
- NumPy provides functions to perform log at the base 2, e and 10.
- We will also explore how we can take log for any base by creating a custom ufunc.
- All of the log functions will place -inf or inf in the elements if the log can not be computed.

Log at Base 2
 - Use the log2() function to perform log at the base 2.

# Find log at base 2 of all elements of following array:
import numpy as np
arr = np.arange(1, 10)
print(np.log2(arr))

Note: The arange(1, 10) function returns an array with integers starting from 1 (included) to 10 (not included).


Log at Base 10
- Use the log10() function to perform log at the base 10.

# Find log at base 10 of all elements of following array:
import numpy as np
arr = np.arange(1, 10)
print(np.log10(arr))

Natural Log, or Log at Base e
- Use the log() function to perform log at the base e.

# Find log at base e of all elements of following array:
import numpy as np
arr = np.arange(1, 10)
print(np.log(arr))


Log at Any Base
 - NumPy does not provide any function to take log at any base, so we can use the frompyfunc() function along with inbuilt function math.log() with two input parameters and one output parameter:

from math import log
import numpy as np
nplog = np.frompyfunc(log, 2, 1)
print(nplog(100, 15))


# visualize logs
import matplotlib.pyplot as plt
import numpy as np
xpoints = np.linspace(0.01,10, 100)
y1points = np.log(xpoints)
y2points = np.log2(xpoints)
y3points = np.log10(xpoints)
# plt.plot(xpoints, ypoints, linestyle = 'dotted', coor = 'green')
plt.plot(xpoints, y1points, linestyle = 'dotted')
plt.plot(xpoints, y2points, linestyle = 'dotted')
plt.plot(xpoints, y3points, linestyle = 'dotted')
plt.grid(visible = True)
plt.show()